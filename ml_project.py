# -*- coding: utf-8 -*-
"""ML_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qZyWaouSNfkNbXC-G0uD1YKH7vN1Dw_Z
"""

import pandas as pd

# Load the earthquake and building damage datasets
earthquake_data = pd.read_csv('/content/database.csv')
building_damage_data = pd.read_csv('/content/15.eq_building_damage.csv')

# Display the first few rows of each dataset
print("Earthquake Data:")
print(earthquake_data.head())

print("\nBuilding Damage Data:")
print(building_damage_data.head())

import pandas as pd

# Load the earthquake data
earthquake_data_path = 'database.csv'  # Path to the first dataset
earthquake_data = pd.read_csv(earthquake_data_path)

# List of columns to drop
columns_to_drop = [
    'Type', 'Depth Error', 'Depth Seismic Stations', 'Magnitude Type',
    'Magnitude Error', 'Magnitude Seismic Stations', 'Azimuthal Gap',
    'Horizontal Distance', 'Horizontal Error', 'Root Mean Square',
    'ID', 'Source', 'Location Source', 'Magnitude Source', 'Status'
]

# Drop the specified columns from the earthquake data
earthquake_data_cleaned = earthquake_data.drop(columns=columns_to_drop)

# Display the first few rows of the cleaned earthquake data
print("Cleaned Earthquake Data:")
print(earthquake_data_cleaned.head())

# Load the building damage data
building_damage_data_path = '15.eq_building_damage.csv'  # Path to the second dataset
building_damage_data = pd.read_csv(building_damage_data_path)

# Drop unnamed columns from the building damage data
building_damage_data_cleaned = building_damage_data.loc[:, ~building_damage_data.columns.str.contains('^Unnamed')]

# Display the first few rows of the cleaned building damage data
print("\nCleaned Building Damage Data:")
print(building_damage_data_cleaned.head())

pip install pandas seaborn matplotlib

pip install pandas seaborn matplotlib geopandas shapely

"""1. Correlation Analysis
This code examines the relationship between earthquake magnitude and depth.
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load the earthquake data
earthquake_path = 'database.csv'  # Path to the earthquake dataset
earthquake_data_cleaned = pd.read_csv(earthquake_path)

# Calculate the correlation matrix for relevant columns in earthquake data
correlation_matrix = earthquake_data_cleaned[['Magnitude', 'Depth']].corr()

# Set up the matplotlib figure for correlation heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm', square=True)
plt.title('Correlation between Earthquake Magnitude and Depth')
plt.show()

"""2. Damage Assessment by Structural Type
This code compares mean damage scores among different building types and visualizes the results.
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load the building damage data
building_damage_data_path = '15.eq_building_damage.csv'  # Path to the building damage dataset
building_damage_data = pd.read_csv(building_damage_data_path)

# Drop unnamed columns
building_damage_data_cleaned = building_damage_data.loc[:, ~building_damage_data.columns.str.contains('^Unnamed')]

# Rename columns for clarity
building_damage_data_cleaned.rename(columns={
    'struct_typ': 'Structural Type',
    'occ_type': 'Occupancy Type'
}, inplace=True)

# Define mappings for Structural Types and Occupancy Types
structural_type_mapping = {
    'URM': 'Unreinforced Masonry',
    'W1': 'Wood Frame',
    'C1': 'Concrete Frame',
    'S1': 'Steel Frame',
}

occupancy_type_mapping = {
    'RES1': 'Residential Type 1',
    'COM1': 'Commercial Type 1',
}

# Replace short forms with full descriptions
building_damage_data_cleaned['Structural Type'].replace(structural_type_mapping, inplace=True)
building_damage_data_cleaned['Occupancy Type'].replace(occupancy_type_mapping, inplace=True)

# Calculate mean damage by structural type and occupancy type
damage_stats = building_damage_data_cleaned.groupby(['Structural Type', 'Occupancy Type'])['meandamage'].mean().reset_index()

# Sort the results for better visualization
damage_stats_sorted = damage_stats.sort_values(by='meandamage', ascending=False)

# Plot the mean damage by structural type and occupancy type
plt.figure(figsize=(12, 8))
sns.barplot(x='meandamage', y='Structural Type', hue='Occupancy Type', data=damage_stats_sorted, palette='viridis')
plt.title('Mean Damage by Structural Type and Occupancy Type')
plt.xlabel('Mean Damage Score')
plt.ylabel('Structural Type')
plt.legend(title='Occupancy Type')
plt.show()

"""3. Trend Analysis
This analysis explores how the year built impacts the structural integrity during earthquakes, potentially indicating changes in construction standards over time.
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load the damage dataset
damage_path = '15.eq_building_damage.csv'
damage_df = pd.read_csv(damage_path)

# Convert 'year_built' to a numeric type, handling potential non-numeric values
damage_df['year_built'] = pd.to_numeric(damage_df['year_built'], errors='coerce')

# Calculate mean damage by year built
trend_stats = damage_df.groupby('year_built')['meandamage'].mean().reset_index()

# Plot the trend of mean damage over the years
plt.figure(figsize=(12, 8))
sns.lineplot(x='year_built', y='meandamage', data=trend_stats, marker='o')
plt.title('Trend of Mean Damage Over Years Built')
plt.xlabel('Year Built')
plt.ylabel('Mean Damage Score')
plt.grid()
plt.show()

"""4. Geospatial Analysis
This code will require geopandas for geospatial plotting. This analysis maps earthquake locations and damage scores.
"""

import geopandas as gpd

# Create a GeoDataFrame from the earthquake data
gdf = gpd.GeoDataFrame(
    earthquake_data_cleaned,
    geometry=gpd.points_from_xy(earthquake_data_cleaned['Longitude'], earthquake_data_cleaned['Latitude']),
    crs="EPSG:4326"  # Assuming the coordinates are in WGS84
)

# Create a plot for the earthquake locations
plt.figure(figsize=(12, 8))
gdf.plot(column='Magnitude', cmap='viridis', legend=True, markersize=50)
plt.title('Earthquake Locations with Magnitude')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.show()

